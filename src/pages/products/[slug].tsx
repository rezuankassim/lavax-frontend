import Layout from "@/components/Layout";
import { CREATE_CART, UPDATE_CART } from "@/graphql/mutation";
import { GET_CART_BY_USER_ID, GET_PRODUCT_BY_SLUG } from "@/graphql/query";
import { useAuthStore } from "@/hooks/auth";
import { useCartStore } from "@/hooks/cart";
import { useNotificationStore } from "@/hooks/notification";
import { Product } from "@/models";
import { useMutation, useQuery } from "@apollo/client";
import {
  ChevronRightIcon,
  MinusIcon,
  PlusIcon,
} from "@heroicons/react/24/outline";
import { NextPage } from "next";
import Error from "next/error";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState } from "react";

const ProductPage: NextPage = () => {
  const router = useRouter();
  const { slug } = router.query;
  const [quantity, setQuantity] = useState(1);
  const user = useAuthStore((state) => state.user);
  const getCart = useCartStore((state) => state.getCart);
  const cart = useCartStore((state) => state.cart);
  const setNotification = useNotificationStore(
    (state) => state.setNotification
  );

  const { loading, error, data } = useQuery(GET_PRODUCT_BY_SLUG, {
    variables: {
      slug: slug,
    },
  });
  const [
    addProductToCartMutation,
    { data: cartData, loading: cartLoading, error: cartError },
  ] = useMutation(CREATE_CART, {
    refetchQueries: [
      { query: GET_CART_BY_USER_ID, variables: { user_id: user?.id } },
    ],
  });
  const [
    updateProductInCartMutation,
    {
      data: updateCartData,
      loading: updateCartLoading,
      error: updateCartError,
    },
  ] = useMutation(UPDATE_CART, {
    refetchQueries: [
      { query: GET_CART_BY_USER_ID, variables: { user_id: user?.id } },
    ],
  });

  const addToCart = async (productId: number, productTitle: string) => {
    if (cart === null) {
      const res = await addProductToCartMutation({
        variables: {
          input: {
            user_id: user.id,
            products: {
              connect: [
                {
                  id: productId,
                  quantity: quantity,
                },
              ],
            },
          },
        },
      });

      getCart(user.id);

      setNotification("has been added to your cart.", "success", productTitle);

      return;
    }

    if (
      cart.products.filter((product) => product.id === productId).length > 0
    ) {
      const res = await updateProductInCartMutation({
        variables: {
          input: {
            id: cart.id,
            products: {
              syncWithoutDetaching: [
                {
                  id: productId,
                  quantity:
                    cart.products.find((product) => product.id === productId)!
                      .pivot.quantity + quantity,
                },
              ],
            },
          },
        },
      });

      getCart(user.id);

      setNotification("has been added to your cart.", "success", productTitle);

      return;
    } else {
      const res = await updateProductInCartMutation({
        variables: {
          input: {
            id: cart.id,
            products: {
              syncWithoutDetaching: [
                {
                  id: productId,
                  quantity: quantity,
                },
              ],
            },
          },
        },
      });

      getCart(user.id);

      setNotification("has been added to your cart.", "success", productTitle);

      return;
    }
  };

  if (error) {
    return <Error statusCode={404} />;
  }

  if (loading) {
    return (
      <>
        <Head>
          <title>Product</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <Layout>
          <div className="flex items-center gap-x-3 bg-gray-200 px-32 py-3">
            <Link href="/">Home</Link>
            <span className="text-gray-400">
              <ChevronRightIcon className="h-4 w-4" />
            </span>
            <Link href="/products">Products</Link>
            <span className="text-gray-400">
              <ChevronRightIcon className="h-4 w-4" />
            </span>
            <div className="h-2 w-36 animate-pulse rounded-full bg-gray-500"></div>
          </div>

          <main className="mt-10 px-32">
            <div className="grid grid-cols-2 gap-x-12">
              <div className="h-[690px] w-[570px] animate-pulse bg-gray-500"></div>

              <div>
                <div className="h-4 w-36 animate-pulse rounded-full bg-gray-500"></div>

                <div className="mt-3 h-4 w-24 animate-pulse rounded-full bg-gray-500"></div>

                <div className="mt-6 h-4 w-full animate-pulse rounded-full bg-gray-500"></div>
                <div className="mt-2 h-4 w-full animate-pulse rounded-full bg-gray-500"></div>
                <div className="mt-2 h-4 w-2/3 animate-pulse rounded-full bg-gray-500"></div>
              </div>
            </div>
          </main>
        </Layout>
      </>
    );
  }

  if (data.product === null) {
    return <Error statusCode={404} />;
  }

  return (
    <>
      <Head>
        <title>Product</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
        <div className="flex items-center gap-x-3 bg-gray-200 px-32 py-3">
          <Link href="/">Home</Link>
          <span className="text-gray-400">
            <ChevronRightIcon className="h-4 w-4" />
          </span>
          <Link href="/products">Products</Link>
          <span className="text-gray-400">
            <ChevronRightIcon className="h-4 w-4" />
          </span>
          <span className="text-gray-400">{data.product.title}</span>
        </div>

        <main className="mt-10 px-32 pb-10">
          <div className="grid grid-cols-2 gap-x-12">
            <div className="relative h-[690px] w-[570px]">
              <Image
                src={`${
                  process.env.NEXT_PUBLIC_BACKEND_URL + data.product.photoUrl
                }`}
                alt="Product's Image"
                fill
                className="object-cover"
                priority
              />
            </div>

            <div>
              <h1 className="text-4xl">{data.product.title}</h1>

              <span className="mt-3 text-2xl">RM{data.product.price}</span>

              <p className="mt-6 max-w-[537px]">{data.product.description}</p>

              <div className="mt-6">
                <span>Quantity</span>

                <div className="mt-2 flex items-center gap-x-2">
                  <div className="flex w-32 items-center justify-between rounded border border-gray-200 px-4 py-3">
                    <button
                      className="disabled:cursor-not-allowed"
                      onClick={() => setQuantity((curr) => curr - 1)}
                      disabled={quantity === 1}
                    >
                      <MinusIcon className="h-6 w-6" />
                    </button>
                    <span>{quantity}</span>
                    <button onClick={() => setQuantity((curr) => curr + 1)}>
                      <PlusIcon className="h-6 w-6" />
                    </button>
                  </div>

                  {user ? (
                    <>
                      <button
                        className="w-36 rounded bg-black py-3 text-center text-white"
                        onClick={() =>
                          addToCart(data.product.id, data.product.title)
                        }
                      >
                        Add to Cart
                      </button>

                      <button className="w-36 rounded bg-blue-600 py-3 text-center text-white">
                        Buy Now
                      </button>
                    </>
                  ) : null}
                </div>
              </div>
            </div>
          </div>
        </main>
      </Layout>
    </>
  );
};

export default ProductPage;
